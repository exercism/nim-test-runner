name: CI
on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

jobs:
  job1:
    name: trunner.nim
    runs-on: ubuntu-18.04
    container: nimlang/nim:1.2.4-ubuntu-regular@sha256:02a555518a05c354ccb2627940f6138fca1090d198e5a0eb60936c03a4875c69

    steps:
    - uses: actions/checkout@aabbfeb2ce60b5bd82389903509092c4648a9713 # v2.2.0

    - name: Compile and run `tests/trunner.nim`
      run: "nim c -r --styleCheck:error --hint[Processing]:off tests/trunner.nim"

  job2:
    name: Docker - build image and run
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@aabbfeb2ce60b5bd82389903509092c4648a9713 # v2.2.0

    - name: Download all `exercism/nim` exercises
      run: git clone --depth 1 https://github.com/exercism/nim.git

    - name: Build image
      run: docker build -t exercism/nim-test-runner:1.2.4 .

    - name: Smoke test the image (using the `bin/run.sh` production interface)
      run: |
        # Create a container named `ntr` from the image we built, but override
        # the `ENTRYPOINT` such that starting the container will test
        # `bin/run.sh` as used in production. Note that the arguments to
        # `bin/run.sh` must come after the image name.
        docker create --name ntr --entrypoint 'bin/run.sh' \
          exercism/nim-test-runner:1.2.4 hello-world /tmp/ /tmp/out/
        # Copy an exercise solution and test file from the `exercism/nim` repo.
        docker cp nim/exercises/hello-world/hello_world_test.nim ntr:/tmp/
        docker cp nim/exercises/hello-world/example.nim ntr:/tmp/hello_world.nim
        # Start the container. The runner runs the `hello-world` test.
        docker start -a ntr
        # Copy the runner's JSON output from the container to the host.
        docker cp ntr:/tmp/out/results.json results.json
        # Remove the container.
        docker rm ntr
        # Write the expected output (which does not contain a newline).
        printf '{"status":"pass","tests":[{"name":"say hi!","status":"pass","output":""}]}' \
          > expected_results.json
        # Fail if the output JSON is not as expected.
        diff results.json expected_results.json

    - name: Run tests inside container (including for exercises from `exercism/nim`)
      run: |
        # Create a container from the image we built, using the `ENTRYPOINT`
        # defined in the Dockerfile.
        docker create --rm --name ntr exercism/nim-test-runner:1.2.4
        # Copy the required files and run the tests.
        docker cp src/runner.nim ntr:/opt/test-runner/src/
        docker cp tests/ ntr:/opt/test-runner/tests/
        docker cp nim/ ntr:/tmp/exercism-nim/
        docker start -a ntr
